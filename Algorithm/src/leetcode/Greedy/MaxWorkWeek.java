package leetcode.Greedy;

/**
 * 给你n 个项目，编号从 0 到 n - 1 。同时给你一个整数数组 milestones
 * 其中每个 milestones[i] 表示第 i 个项目中的阶段任务数量。
 *
 * 你可以按下面两个规则参与项目中的工作：
 *
 * 每周，你将会完成 某一个 项目中的 恰好一个阶段任务。你每周都 必须 工作。
 * 在 连续的 两周中，你 不能 参与并完成同一个项目中的两个阶段任务。
 * 一旦所有项目中的全部阶段任务都完成，或者仅剩余一个阶段任务都会导致你违反上面的规则，那么你将停止工作 。
 * 注意，由于这些条件的限制，你可能无法完成所有阶段任务。
 *
 * 返回在不违反上面规则的情况下你最多能工作多少周。
 * 示例 1：
 *
 * 输入：milestones = [1,2,3]
 * 输出：6
 * 解释：一种可能的情形是：
 * - 第 1 周，你参与并完成项目 0 中的一个阶段任务。
 * - 第 2 周，你参与并完成项目 2 中的一个阶段任务。
 * - 第 3 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 4 周，你参与并完成项目 2 中的一个阶段任务。
 * - 第 5 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 6 周，你参与并完成项目 2 中的一个阶段任务。
 * 总周数是 6 。

 */
public class MaxWorkWeek {
    // 比较最大工作树和剩余工作数量。如果剩余工作数量足够，就能在最大和其他中来回切换完成所有任务
    // 否则只能完成剩余工作量的两倍+1
    public long numberOfWeeks(int[] milestones) {
        long maxValue = 0;
        long sum=0;
        for(int i:milestones){
            maxValue= Math.max(i,maxValue);
            sum+=i;
        }
        long res = sum-maxValue;
        if(res+1>=maxValue){
            return sum;
        }
        else{
            return 1+2*res;
        }
    }
}
